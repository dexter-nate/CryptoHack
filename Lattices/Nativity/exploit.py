from sage.all import * # type: ignore
from Crypto.Util.number import long_to_bytes


with open('Lattices/Nativity/encs.txt', 'r') as f:
    tmp = f.readlines()
    
cts = []
for r in tmp:
    row = r.strip().split(' ')
    c = [int(x) for x in row]
    cts.append(c)


with open('Lattices/Nativity/public_key.txt', 'r') as f:
    tmp = f.readlines()

pk = []
for r in tmp:
    row = r.strip().split(' ')
    v = [int(x) for x in row]
    pk.append(v)


n = 64 # rows
m = 512 # colums
A = Matrix(pk[:n]) # type: ignore
# last_row = s*A + 2*e 
# z = s*A (mod 2)
z = vector(pk[n]) # type: ignore

F2 = GF(2) # type: ignore
A2 = Matrix(F2, A % 2) # type: ignore
A_T = A2.transpose()
z2 = vector(F2, z) # type: ignore
s2 = A_T.solve_right(z2) # get s % 2


def decrypt_cts(s_mod2, cts):
    sk = [(-int(x)) % 2 for x in s_mod2] + [1] # sk = [-s, 1]
    sk = vector(GF(2), sk) # type: ignore

    bits = []
    for c in cts:
        c_vec = vector(GF(2), [x % 2 for x in c]) # type: ignore
        bit = int(sk.dot_product(c_vec))
        bits.append(bit)

    bitstring = ''.join(map(str, bits))
    msg_int = int(bitstring, 2)
    msg = long_to_bytes(msg_int)

    return msg


flag = decrypt_cts(s2, cts).decode()
print(flag)
