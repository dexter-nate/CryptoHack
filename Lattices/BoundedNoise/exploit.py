from sage.all import * # type: ignore


with open('Lattices/BoundedNoise/output.txt', 'r') as f:
        data = eval(f.read())


mat = eval(data['A'])
vec = eval(data['b'])
n = len(mat[0])
D = 2 
Q_prime = 351

q = 65537
Fq = GF(q) # type: ignore
var_names = ['x' + str(i + 1) for i in range(n)]
R = PolynomialRing(Fq, n, var_names) # type: ignore
x = R.gens()
S_sym = list(x)
Es = [Fq(e) for e in [0, 1]] 

A_i_Fq = [[Fq(c) for c in row] for row in mat[:Q_prime]]
b_i_Fq = [Fq(c) for c in vec[:Q_prime]]

P_i_list = []
for i in range(Q_prime):
    
    L_i = sum(A_i_Fq[i][j] * S_sym[j] for j in range(n)) - b_i_Fq[i]
    P_i_current = 1
    
    for e in Es:
        P_i_current *= (L_i + e)
    
    P_i_list.append(P_i_current)



MONOMIALS = []
MONOMIALS.extend(S_sym) 
for i in range(n):
    MONOMIALS.append(S_sym[i] * S_sym[i])
    for j in range(i + 1, n):
        MONOMIALS.append(S_sym[i] * S_sym[j])
NUM_VARS_Y = len(MONOMIALS) 

L_matrix = [] 
B_vector = [] 
for P_expanded in P_i_list:
    L_i_row = []
    for m in MONOMIALS:
        coeff = P_expanded.monomial_coefficient(m)  # extract coeff of poly P
        L_i_row.append(coeff) 
    
    constant_term = P_expanded.constant_coefficient()  # extract constant term of poly P
    B_i_val = -constant_term 

    L_matrix.append(L_i_row)
    B_vector.append(B_i_val)


L_sage = Matrix(Fq, L_matrix) # type: ignore
B_sage = vector(Fq, B_vector) # type: ignore
print(f"Linear System of Eqs: {L_sage.nrows()}x{L_sage.ncols()} in GF({q})...")

# Risolvi per il vettore Y: L*Y = B
Y_solution = L_sage.solve_right(B_sage) 


S_solution_int = []
for i in range(n):
    S_solution_int.append(int(Y_solution[i]))


flag_int = 0
for i, coefficient in enumerate(S_solution_int):
    flag_int += coefficient * (q**i)

flag_bytes = flag_int.to_bytes(length=(flag_int.bit_length() + 7) // 8, byteorder='big')
flag = flag_bytes.decode('utf-8').strip('\x00') 
print(flag)
