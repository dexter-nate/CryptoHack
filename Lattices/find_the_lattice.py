from sage.all import * # type: ignore
from Crypto.Util.number import long_to_bytes


pub_key = (
  7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257,
  2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800
)
enc_flag = 5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523

q, h = pub_key

B = Matrix(ZZ, [[q, 0], # type: ignore
                [h, 1]])
B_reduced = B.LLL()
print(f'B:\n{B_reduced}')

sol = B_reduced[0]
# h = f^-1 * g 
g, f = sol[0], sol[1]


def decrypt(q, f, g, e):
  inv_f = pow(f, -1, g)
  
  a = (f*e) % q
  m = (a*inv_f) % g
  return m


m = decrypt(q, f, g, enc_flag)
print(long_to_bytes(m).decode())
